"""
Django settings for ri_codex_ai_core project.

Generated by 'django-admin startproject' using Django 4.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
import pymysql
import logging
import urllib
from opentelemetry.exporter.otlp.proto.http.trace_exporter import OTLPSpanExporter
from opentelemetry import trace
from opentelemetry.sdk.resources import SERVICE_NAME, Resource
from opentelemetry.sdk.trace import TracerProvider
from opentelemetry.sdk.trace.export import BatchSpanProcessor
from opentelemetry.instrumentation.django import DjangoInstrumentor
from .StructuredLogFormatter import StructuredLogFormatter
pymysql.install_as_MySQLdb()
load_dotenv()

otlp_exporter_endpoint=os.environ.get("OTLP_ENDPOINT","http://localhost:4318/v1/traces")
celery_db_name = os.environ.get("CELERY_DB_NAME")
celery_db_username = os.environ.get("CELERY_DB_USER")
celery_db_password = os.environ.get("CELERY_DB_PASSWORD")
celery_db_password_escaped = urllib.parse.quote_plus(celery_db_password)
celery_db_host=os.environ.get("CELERY_DB_HOST")

rabbitmq_user= os.environ.get("RABBITMQ_USER")
rabbitmq_password = os.environ.get("RABBITMQ_PASSWORD")
rabbitmq_host = os.environ.get("RABBITMQ_HOST")

memchached_location= os.environ.get("MEMCACHED_LOCATION")

SECRET_KEY=os.environ.get("SECRET_KEY")
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

file_path='log'
if not os.path.exists(file_path):
    os.mkdir('log')
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

from django.db.backends.mysql.base import DatabaseWrapper
DatabaseWrapper.data_types['DateTimeField'] = 'datetime'


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'structured',
        },
        'file': {
            'class': 'logging.FileHandler',
            'filename': './log/logs.log',
            'formatter': 'structured',
        },
    },

    'formatters': {
        'structured': {
            '()': StructuredLogFormatter,
        },
    },
    
    'loggers': {
        'main': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': True,
        },
        'django': {
            'handlers':['console', 'file'],
            'level': 'CRITICAL',
            'propagate': False,
        },
        'django.request': {
            'handlers': ['console', 'file'],
            'level': 'CRITICAL',
            'propagate': False,
        },
    },
}
resource = Resource(attributes={
    SERVICE_NAME: "ri-codex-ai-core"
})
DjangoInstrumentor().instrument()
provider = TracerProvider(resource=resource)
otlp_exporter = OTLPSpanExporter(endpoint=otlp_exporter_endpoint)
processor = BatchSpanProcessor(otlp_exporter)
provider.add_span_processor(processor)
trace.set_tracer_provider(provider)
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "ri_codex_ai_core.settings")
# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "auto_ml_api",
    'corsheaders',
    'celery',
    'django_celery_results',
]

# Configure Celery backend and broker
CELERY_BROKER_URL = f'amqp://{rabbitmq_user}:{rabbitmq_password}@{rabbitmq_host}//'  # Use your preferred broker URL
CELERY_RESULT_BACKEND = f'db+mysql://{celery_db_username}:{celery_db_password_escaped}@{celery_db_host}:3306/{celery_db_name}'  # Use your preferred result backend

# Configure Celery task queue
CELERY_TASK_ALWAYS_EAGER = False
CELERY_TASK_DEFAULT_QUEUE = 'default'
CELERY_TASK_QUEUE_EXPIRES = 60 * 60 * 24  # 1 day
CELERY_TASK_SERIALIZER = 'json'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_RESULT_SERIALIZER = 'json'


# Specify the location of the Celery configuration file
CELERY_CONFIG_MODULE = 'ri_codex_ai_core.celery'
CELERY_CACHE_BACKEND = 'default'

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.memcached.PyLibMCCache',
        'LOCATION': memchached_location,
    },
}


MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware", 
]

CORS_ALLOW_METHODS = [
    "DELETE",
    "GET",
    "OPTIONS",
    "PATCH",
    "POST",
    "PUT",
]

CORS_ALLOW_HEADERS = [
    "accept",
    "accept-encoding",
    "authorization",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
    "x-user-email",
    "x-user-refresh-token",
    "Trace-Id",
    "Span-Id",
]

ROOT_URLCONF = "ri_codex_ai_core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "ri_codex_ai_core.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {    
         'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': celery_db_name, # change the name of database with "database"
        'USER': celery_db_username,
        'PASSWORD': celery_db_password,
        'HOST': celery_db_host,
        'PORT': '3306',
    }
    }


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",},
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = "static/"

ALLOWED_HOSTS = ['*']
CORS_ORIGIN_WHITELIST = [
    'http://localhost:3000'
]
CORS_ORIGIN_ALLOW_ALL = True
# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field


